from gpiozero import TonalBuzzer
from gpiozero.tones import Tone
from time import sleep

# Define the GPIO pin connected to the piezo buzzer's signal pin
buzzer_pin = 14

# Initialize the TonalBuzzer object
buzzer = TonalBuzzer(buzzer_pin)

# Define Morse code characters
morse_code_dict = {
    'Z': '--..',
    'R': '.-.',
    '6': '-....',
    'B': '-...',
    'N': '-.',
    ' ': ' '
}

# Define the time units for Morse code
dot_time = 0.2
dash_time = dot_time * 3
element_space = dot_time
char_space = dot_time * 3
word_space = dot_time * 7

# Function to play a single element (dot or dash)
def play_element(element):
    """
    Plays a single dot or dash on the buzzer.
    """
    tone_frequency = 800
    
    if element == '.':
        buzzer.play(Tone(tone_frequency))
        sleep(dot_time)
    elif element == '-':
        buzzer.play(Tone(tone_frequency))
        sleep(dash_time)
    
    buzzer.stop()
    sleep(element_space)

# Function to play a full Morse code message
def play_morse_code(message):
    """
    Translates a string message into Morse code and plays it.
    """
    print(f"Playing '{message}' in Morse code...")
    for char in message.upper():
        if char in morse_code_dict:
            code = morse_code_dict[char]
            for element in code:
                play_element(element)
            sleep(char_space)
        elif char == ' ':
            sleep(word_space)
        else:
            print(f"Warning: Character '{char}' not in Morse code dictionary. Skipping.")
    print("Morse code playback complete.")

# The message to play
message_to_play = "ZR6BN"

# Main loop to run the script repeatedly
try:
    while True:
        play_morse_code(message_to_play)
        print("Waiting 60 seconds...")
        sleep(60) # Wait for 60 seconds before the next loop
except KeyboardInterrupt:
    print("\nScript terminated by user.")
except Exception as e:
    print(f"An error occurred: {e}")
finally:
    buzzer.close()
    print("Script finished.")
